#!/bin/bash

# This is a custom build script to build and manage my xmonad executable by
# cabal. 'xmonad' command use custom build script if it find an executable
# script named as 'build` on the config directory. For instance, this script is
# deployed to '~/.config/xmonad/build' with user executable permission.
# 'xmonad' command pass an appropriate user xmonad executable path as the first
# argument to the custom build script when calls it. So if we run it by hand,
# we also need to pass output path as the first argument like below.
#
# $ ./build ~/.cache/xmonad/xmonad-x86_64-linux
#
# 'xmonad' doesn't check whether or not we should recompile if we have a custom
# build script. So we need to check it ourselves.
#
# 'xmonad' command redirects stderr output of the custom build script to
# xmonad.errors, which is probably at '~/.local/share/xmonad/xmonad.errors'.

set -Cueo pipefail

###############################################################################

# Constants

# Log prefix message.
readonly LOGPREFIX="[${0##*/}]"

# My xmonad executable name compiled by cabal.
readonly BINNAME=myxmonad

# Files consist my xmonad executable. It is out-of-date if even one of them is
# newer than it.
readonly -a SOURCES=(
  app
  src
  xmonad-config.cabal
  cabal.project
  cabal.project.local
)

###############################################################################

# Functions

# Wrap texts from stdin with their arguments.
wrap () {
  echo -n -e "$1"
  while read -r; do
    echo -e "$REPLY"
  done
  echo -n -e "$2"
}

# Error message.
error () {
  local left right

  if [[ -t 1 && $TERM != dumb ]]; then
    left='\033[31m'
    right='\033[0m'
  fi

  wrap "$left" "$right" <<<"$LOGPREFIX $*" >&2
}

# Notificatin message.
info () {
  echo "$LOGPREFIX $*"
}

# Build and deploy(install) my xmonad executable.
install_xmonad () {
  local -r dest=$1
  local -r dest_dir=${dest%/*}

  if ! [[ -d $dest_dir ]]; then
    error "$dest_dir isn't a directory."
    return 1
  fi

  # NOTE: xmonad binaries built by cabal-3.8.1.0 can't create xft font sets.
  cabal install \
    --installdir="$dest_dir" \
    --install-method=copy \
    --overwrite-policy=always \
    ;

  if [[ -e $dest ]]; then
    if [[ -h $dest ]]; then
      if [[ $dest -ef $dest_dir/$BINNAME ]]; then
        info "$dest is linked to $dest_dir/$BINNAME, so no need to do anything."
      else
        info "$dest isn't linked to $dest_dir/$BINNAME. Please unlink it."
      fi
    else
      info "$dest isn't a symlink. Please remove it."
    fi
  else
    ln -sv "$BINNAME" "$dest"
  fi
}

###############################################################################

# Main

# Arguments.
case $# in
  0 )
    error 'Must pass the output executable path as the first argument.'
    exit 1
    ;;
  1 )
    DEST=$1
    readonly DEST
    ;;
  * )
    error 'Too many arguments. Only needs one argument.'
    exit 1
    ;;
esac

# Initial installation.
if ! [[ -x $DEST ]]; then
  info "Not found an executable of '$DEST', so build and install it."
  install_xmonad "$DEST"
  exit
fi

declare -a updated=()

# NOTE: "read" with "-d DELIM" returns non-zero if the DELIM isn't in the
# input. If the DELIM is an empty string, it means that DELIM is a NUL
# character (\0). However any NUL character in command substitutions is ignored
# by bash, so "read -d ''" with an input which is created by a command
# substitution always returns non-zero as a status code.
read -r -d '' -a srcs <<<"$(
  for src in "${SOURCES[@]}"; do
    if [[ -d $src ]]; then
      find "$src" -type f -name '*.hs' -o -name '*.lhs' -o -name '*.hsc'
    else
      echo "$src"
    fi
  done
)" || true

for src in "${srcs[@]}"; do
  if [[ $src -nt $DEST ]]; then
    updated+=("$src")
  fi
done

# Recompile if my xmonad executable is out-of-date.
if (( ${#updated[@]} )); then
  info "Found some updated source files."

  for src in "${updated[@]}"; do
    info "  - $src"
  done

  info "So recompile my xmonad executable."

  install_xmonad "$DEST"
else
  info 'No need to recompile Xmonad, so do nothing.'
fi
